#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#	Oct 24, 2017 01:24:01 AM


import sys, os
import camera
import json
import re
import PIL.ImageTk
from PIL import Image, ImageDraw, ImageFont
import photobooth
from photobooth import create_photo

WIN32 = (os.name != 'posix')
PHOTO_FORMAT = []

try:
	from Tkinter import *
except ImportError:
	from tkinter import *

try:
	import ttk
	py3 = 0
except ImportError:
	import tkinter.ttk as ttk
	py3 = 1

def set_Tk_var():
	global combobox
	combobox = StringVar()
	global combobox2
	combobox2 = StringVar()
	global txtSAPVar
	txtSAPVar = StringVar()
	global lblCameraVar
	lblCameraVar = StringVar()
	global lblPrinterVar
	lblPrinterVar = StringVar()
	global ckBoxVar
	ckBoxVar = BooleanVar()
	global txtEndScreenDelayVar
	txtEndScreenDelayVar = StringVar()
	global txtPreviewScreenDelay
	txtPreviewScreenDelay = StringVar()
	global ckShowMouseVar
	ckShowMouseVar = BooleanVar()

def onBtnCameraUpdate():
	lblCameraVar.set(camera.get_model())
	
def onPreviewPrintStyle():
	PHOTO_FORMAT = []
	for fileName in os.listdir('formats'):
		with open(os.path.join('formats', fileName), 'r') as f:
			frmt = json.loads(f.read())
			if isinstance(frmt, list):
				PHOTO_FORMAT += frmt
			else:
				PHOTO_FORMAT.append(frmt)
	
	selected_format = PHOTO_FORMAT[0]

	for frmt in PHOTO_FORMAT:
		if frmt['name'] == combobox.get():
			selected_format = frmt
	photobooth.SETTINGS['preview_screen'] = False		
	create_photo(selected_format)
	f = photobooth.result_file_name
	
	master = Toplevel()
	canvas_width = 600
	canvas_height = 400
	canv = Canvas(master,
	           width=canvas_width,
	           height=canvas_height)
	canv.pack()
	photo = PIL.Image.open(f)
	photo = photo.rotate(90, expand=True)
	photo = photo.resize((canvas_width, canvas_height))
	img1 = PIL.ImageTk.PhotoImage(photo)
	canv.create_image(0, 0, image=img1, anchor=NW)
	canv.image = img1
	
def onBtnPrinterUpdate():
	print('settings_support.onBtnPrinterUpdate')
	sys.stdout.flush()

def onBtnSaveConfig():
	SETTINGS['strike_a_pose_delay'] = int(txtSAPVar.get())
	SETTINGS['end_screen_delay'] = int(txtEndScreenDelayVar.get())
	SETTINGS['preview_screen_delay'] = int(txtPreviewScreenDelay.get())
	SETTINGS['print_format'] = combobox.get()
	SETTINGS['delay_screens'] = combobox2.get()
	SETTINGS['preview_screen'] = ckBoxVar.get()
	SETTINGS['show_mouse'] = ckShowMouseVar.get()
	with open('settings.json', 'w') as f:
		f.write(json.dumps(SETTINGS, indent=4))
	root.destroy()

def onBtnTakePhoto():
	path = '/tmp/phototest.jpg'
	if not WIN32:
		camera.capture_and_download_photo(path)
	else:
		path = path[1:]
	photo = PIL.Image.open(path)
	photo = photo.resize((186, 153))
	img1 = PIL.ImageTk.PhotoImage(photo)
	w.Canvas1.create_image(0, 0, image=img1, anchor=NW)
	w.Canvas1.image = img1

def init(top, gui, *args, **kwargs):
	global w, top_level, root
	w = gui
	top_level = top
	root = top
	
	if not WIN32:	
		camera.check_and_close_gvfs_gphoto()
		lblCameraVar.set(camera.get_model())
	
	global SETTINGS
	SETTINGS = {}
	SCENES = []
	global PHOTO_FORMAT
	
	for fileName in os.listdir('formats'):
		with open(os.path.join('formats', fileName), 'r') as f:
			frmt = json.loads(f.read())
			if isinstance(frmt, list):
				PHOTO_FORMAT += frmt
			else:
				PHOTO_FORMAT.append(frmt)
	
	frmts = []
	for frmt in PHOTO_FORMAT:
		frmts.append(frmt['name'])
   	gui.cbPrintFormat['values'] = tuple(frmts)
   	
   	with open('settings.json', 'r') as f:
		SETTINGS = json.loads(f.read())
	photobooth.SETTINGS = SETTINGS
	
	with open('config.json', 'r') as f:
		SCENES = json.loads(f.read())

	txtSAPVar.set(SETTINGS['strike_a_pose_delay'])
	txtEndScreenDelayVar.set(SETTINGS['end_screen_delay'])
	txtPreviewScreenDelay.set(SETTINGS['preview_screen_delay'])
	
	delayScreens = []
	rexpr = re.compile('\AScreen\d+')
	for scene in SCENES:
		if rexpr.match(scene['name']):
			delayScreens.append(scene['name'])

	gui.cbDelayScreen['values'] = tuple(delayScreens)
	
	if SETTINGS['preview_screen']:
		gui.ckPreviewScreen.select()
	else:
		gui.ckPreviewScreen.deselect()
	
	if SETTINGS['show_mouse']:
		gui.ckShowMouse.select()
	else:
		gui.ckShowMouse.deselect()
		
	combobox.set(SETTINGS['print_format'])
	combobox2.set(SETTINGS['delay_screens'])

def destroy_window():
	# Function which closes the window.
	global top_level
	top_level.destroy()
	top_level = None

if __name__ == '__main__':
	import settings
	settings.vp_start_gui()


